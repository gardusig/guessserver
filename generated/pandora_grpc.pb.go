// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/pandora.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PandoraService_GuessNumber_FullMethodName = "/pandora_service.PandoraService/GuessNumber"
	PandoraService_OpenBox_FullMethodName     = "/pandora_service.PandoraService/OpenBox"
)

// PandoraServiceClient is the client API for PandoraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PandoraServiceClient interface {
	GuessNumber(ctx context.Context, in *GuessNumberRequest, opts ...grpc.CallOption) (*GuessNumberResponse, error)
	OpenBox(ctx context.Context, in *LockedPandoraBox, opts ...grpc.CallOption) (*OpenedPandoraBox, error)
}

type pandoraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPandoraServiceClient(cc grpc.ClientConnInterface) PandoraServiceClient {
	return &pandoraServiceClient{cc}
}

func (c *pandoraServiceClient) GuessNumber(ctx context.Context, in *GuessNumberRequest, opts ...grpc.CallOption) (*GuessNumberResponse, error) {
	out := new(GuessNumberResponse)
	err := c.cc.Invoke(ctx, PandoraService_GuessNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pandoraServiceClient) OpenBox(ctx context.Context, in *LockedPandoraBox, opts ...grpc.CallOption) (*OpenedPandoraBox, error) {
	out := new(OpenedPandoraBox)
	err := c.cc.Invoke(ctx, PandoraService_OpenBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PandoraServiceServer is the server API for PandoraService service.
// All implementations must embed UnimplementedPandoraServiceServer
// for forward compatibility
type PandoraServiceServer interface {
	GuessNumber(context.Context, *GuessNumberRequest) (*GuessNumberResponse, error)
	OpenBox(context.Context, *LockedPandoraBox) (*OpenedPandoraBox, error)
	mustEmbedUnimplementedPandoraServiceServer()
}

// UnimplementedPandoraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPandoraServiceServer struct {
}

func (UnimplementedPandoraServiceServer) GuessNumber(context.Context, *GuessNumberRequest) (*GuessNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessNumber not implemented")
}
func (UnimplementedPandoraServiceServer) OpenBox(context.Context, *LockedPandoraBox) (*OpenedPandoraBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenBox not implemented")
}
func (UnimplementedPandoraServiceServer) mustEmbedUnimplementedPandoraServiceServer() {}

// UnsafePandoraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PandoraServiceServer will
// result in compilation errors.
type UnsafePandoraServiceServer interface {
	mustEmbedUnimplementedPandoraServiceServer()
}

func RegisterPandoraServiceServer(s grpc.ServiceRegistrar, srv PandoraServiceServer) {
	s.RegisterService(&PandoraService_ServiceDesc, srv)
}

func _PandoraService_GuessNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PandoraServiceServer).GuessNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PandoraService_GuessNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PandoraServiceServer).GuessNumber(ctx, req.(*GuessNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PandoraService_OpenBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockedPandoraBox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PandoraServiceServer).OpenBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PandoraService_OpenBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PandoraServiceServer).OpenBox(ctx, req.(*LockedPandoraBox))
	}
	return interceptor(ctx, in, info, handler)
}

// PandoraService_ServiceDesc is the grpc.ServiceDesc for PandoraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PandoraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pandora_service.PandoraService",
	HandlerType: (*PandoraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GuessNumber",
			Handler:    _PandoraService_GuessNumber_Handler,
		},
		{
			MethodName: "OpenBox",
			Handler:    _PandoraService_OpenBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pandora.proto",
}
